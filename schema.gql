# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FactoryModel {
  address: String!
  pairCount: Float!
  totalTxCount: Float!
  totalValueLockedUSD: String!
  totalVolumeUSD24h: String!
  totalFeesUSD24h: String!
  maintenance: Boolean!
  pairCreationEnabled: Boolean!
  state: Boolean!
  owner: String!
  allPairsManagedAddresses: [String!]!
  allPairTokens: [PairTokens!]!
  allPairsMetadata: [PairMetadata!]!
  pairTemplateAddress: String!
  temporaryOwnerPeriod: String!
}

type EsdtToken {
  identifier: String!
  name: String!
  owner: String!
  supply: String!
  decimals: Float!
  isPaused: Boolean!
  canUpgrade: Boolean!
  canMint: Boolean!
  canBurn: Boolean!
  canChangeOwner: Boolean!
  canPause: Boolean!
  canFreeze: Boolean!
  canWipe: Boolean!
  type: String
  balance: String
}

type PairInfoModel {
  reserves0: String!
  reserves1: String!
  totalSupply: String!
}

type LiquidityPosition {
  firstTokenAmount: String!
  secondTokenAmount: String!
}

type LockedTokensInfo {
  lockingScAddress: String!
  unlockEpoch: Int!
  lockingDeadlineEpoch: Int!
}

type PairModel {
  address: String!
  firstToken: EsdtToken!
  secondToken: EsdtToken!
  firstTokenPrice: String!
  firstTokenPriceUSD: String!
  secondTokenPrice: String!
  secondTokenPriceUSD: String!
  liquidityPoolToken: EsdtToken!
  liquidityPoolTokenPriceUSD: String!
  firstTokenLockedValueUSD: String!
  secondTokenLockedValueUSD: String!
  lockedValueUSD: String!
  firstTokenVolume24h: String!
  secondTokenVolume24h: String!
  volumeUSD24h: String!
  feesUSD24h: String!
  feesAPR: String!
  info: PairInfoModel!
  totalFeePercent: Float!
  specialFeePercent: Float!
  trustedSwapPairs: [String!]!
  type: String!
  state: String!
  lockedTokensInfo: LockedTokensInfo
}

type NftCollection {
  collection: String!
  name: String!
  ticker: String!
  decimals: Int!
  issuer: String!
  timestamp: Float!
  canUpgrade: Boolean!
  canMint: Boolean!
  canBurn: Boolean!
  canChangeOwner: Boolean!
  canPause: Boolean!
  canFreeze: Boolean!
  canWipe: Boolean!
  canAddSpecialRoles: Boolean!
  canTransferNFTCreateRole: Boolean!
  NFTCreateStopped: Boolean!
}

type FarmTokenAttributesModel {
  identifier: String
  attributes: String
  rewardPerShare: String!
  originalEnteringEpoch: Int!
  enteringEpoch: Int!
  aprMultiplier: Int
  lockedRewards: Boolean
  initialFarmingAmount: String!
  compoundedReward: String!
  currentFarmAmount: String!
}

type RewardsModel {
  decodedAttributes: FarmTokenAttributesModel!
  rewards: String!
  remainingFarmingEpochs: Int
}

type ExitFarmTokensModel {
  farmingTokens: String!
  rewards: String!
}

type FarmMigrationConfig {
  migrationRole: String!
  oldFarmAddress: String!
  oldFarmTokenID: String!
  newFarmAddress: String
  newLockedFarmAddress: String
}

type FarmModel {
  address: String!
  farmedToken: EsdtToken!
  farmedTokenPriceUSD: String!
  farmToken: NftCollection!
  farmTokenPriceUSD: String!
  farmingToken: EsdtToken!
  farmingTokenPriceUSD: String!
  produceRewardsEnabled: Boolean!
  perBlockRewards: String!
  farmTokenSupply: String!
  farmingTokenReserve: String
  penaltyPercent: Int!
  minimumFarmingEpochs: Int!
  rewardPerShare: String!
  rewardReserve: String!
  lastRewardBlockNonce: Int!
  undistributedFees: String
  currentBlockFee: String
  divisionSafetyConstant: String!
  aprMultiplier: Int
  apr: String
  lockedRewardsAPR: String
  unlockedRewardsAPR: String
  totalValueLockedUSD: String!
  lockedFarmingTokenReserveUSD: String
  unlockedFarmingTokenReserveUSD: String
  lockedFarmingTokenReserve: String
  unlockedFarmingTokenReserve: String
  state: String!
  requireWhitelist: Boolean
  version: String!
  rewardType: String
  migrationConfig: FarmMigrationConfig
}

type PairMetadata {
  address: String!
  firstTokenID: String!
  secondTokenID: String!
}

type PairTokens {
  firstTokenID: String!
  secondTokenID: String!
}

type HistoricDataModel {
  timestamp: String!
  value: String!
}

type PairDayDataModel {
  timestamp: String!
  address: String!
  firstToken: EsdtToken!
  secondToken: EsdtToken!
  lockedValueUSD: String!
  firstTokenPriceUSD: String!
  secondTokenPriceUSD: String!
  volumeUSD24h: String!
  feesUSD24h: String!
}

type WrapModel {
  address: String!
  shard: Int!
  wrappedToken: EsdtToken!
}

type TransactionModel {
  nonce: Float!
  value: String!
  sender: String!
  receiver: String!
  gasPrice: Float!
  gasLimit: Float!
  data: String!
  chainID: String!
  version: Float!
  options: Float
  status: String
  signature: String
}

type AutoRouterModel {
  tokenInID: String!
  tokenOutID: String!
  amountIn: String!
  amountOut: String!
  tokenRoute: [String!]!
  intermediaryAmounts: [String!]!
  addressRoute: [String!]!
  tolerance: Float!
  transactions: [TransactionModel!]!
}

type CommunityDistributionModel {
  epoch: Float!
  amount: String!
}

type DistributionModel {
  address: String!
  communityDistribution: CommunityDistributionModel!
}

type ProxyModel {
  address: String!
  wrappedLpToken: NftCollection!
  wrappedFarmToken: NftCollection!
  assetToken: EsdtToken!
  lockedAssetToken: NftCollection!
  intermediatedPairs: [String!]!
  intermediatedFarms: [String!]!
}

type WrappedLpTokenAttributesModel {
  identifier: String!
  attributes: String!
  lpTokenID: String!
  lpTokenTotalAmount: String!
  lockedAssetsInvested: String!
  lockedAssetsNonce: Int!
}

type WrappedFarmTokenAttributesModel {
  identifier: String!
  attributes: String!
  farmTokenID: String!
  farmTokenNonce: Int!
  farmTokenAmount: String!
  farmTokenIdentifier: String!
  farmTokenAttributes: FarmTokenAttributesModel!
  farmingTokenID: String!
  farmingTokenNonce: Int!
  farmingTokenAmount: String!
}

type UnlockMileStoneModel {
  epochs: Int!
  percent: Float!
}

type LockedAssetAttributes {
  attributes: String!
  identifier: String!
  unlockSchedule: [UnlockMileStoneModel!]!
  isMerged: Boolean!
}

type LockedAssetModel {
  address: String!
  assetToken: EsdtToken!
  lockedToken: NftCollection!
  unlockMilestones: [UnlockMileStoneModel!]!
}

type StakingTokenAttributesModel {
  identifier: String
  attributes: String
  type: StakingTokenType!
  rewardPerShare: String!
  compoundedReward: String!
  currentFarmAmount: String!
}

enum StakingTokenType {
  STAKING_FARM_TOKEN
  UNBOND_FARM_TOKEN
}

type UnbondTokenAttributesModel {
  identifier: String
  attributes: String
  type: StakingTokenType!
  remainingEpochs: Int!
}

type DualYieldTokenAttributesModel {
  identifier: String!
  attributes: String!
  lpFarmTokenNonce: Int!
  lpFarmTokenAmount: String!
  stakingFarmTokenNonce: Int!
  stakingFarmTokenAmount: String!
}

type LockedTokenAttributesModel {
  identifier: String!
  attributes: String!
  originalTokenID: String!
  originalTokenNonce: Int!
  unlockEpoch: Int!
}

type LpProxyTokenAttributesModel {
  identifier: String!
  attributes: String!
  lpTokenID: String!
  firstTokenID: String!
  firstTokenLockedNonce: Int!
  secondTokenID: String!
  secondTokenLockedNonce: Int!
}

type FarmProxyTokenAttributesModel {
  identifier: String!
  attributes: String!
  farmType: String!
  farmTokenID: String!
  farmTokenNonce: Int!
  farmingTokenID: String!
  farmingTokenLockedNonce: Int!
  farmTokenAttributes: FarmTokenAttributesModel!
}

type SimpleLockModel {
  address: String!
  lockedToken: NftCollection!
  lpProxyToken: NftCollection!
  farmProxyToken: NftCollection!
  intermediatedPairs: [String!]!
  intermediatedFarms: [String!]!
}

type UserToken {
  identifier: String!
  name: String!
  owner: String!
  supply: String!
  decimals: Float!
  isPaused: Boolean!
  canUpgrade: Boolean!
  canMint: Boolean!
  canBurn: Boolean!
  canChangeOwner: Boolean!
  canPause: Boolean!
  canFreeze: Boolean!
  canWipe: Boolean!
  type: String
  balance: String
  valueUSD: String!
}

type StakingModel {
  address: String!
  farmToken: NftCollection!
  farmingToken: EsdtToken!
  rewardToken: EsdtToken!
  farmTokenSupply: String!
  rewardPerShare: String!
  accumulatedRewards: String!
  rewardCapacity: String!
  annualPercentageRewards: String!
  minUnboundEpochs: Int!
  penaltyPercent: Int!
  minimumFarmingEpochs: Int!
  perBlockRewards: String!
  lastRewardBlockNonce: Int!
  divisionSafetyConstant: String!
  produceRewardsEnabled: Boolean!
  state: String!
}

type StakingRewardsModel {
  decodedAttributes: StakingTokenAttributesModel!
  rewards: String!
}

type StakingProxyModel {
  address: String!
  lpFarmAddress: String!
  stakingFarmAddress: String!
  pairAddress: String!
  stakingToken: EsdtToken!
  farmToken: NftCollection!
  dualYieldToken: NftCollection!
  lpFarmToken: NftCollection!
}

type DualYieldRewardsModel {
  identifier: String
  attributes: String
  stakingRewards: StakingRewardsModel!
  farmRewards: RewardsModel!
}

type UnstakeFarmTokensReceiveModel {
  liquidityPosition: LiquidityPosition!
  farmRewards: String!
  stakingRewards: String!
}

type PhaseModel {
  name: String!
  penaltyPercent: Float!
}

type PriceDiscoveryModel {
  address: String!
  launchedToken: EsdtToken!
  acceptedToken: EsdtToken!
  redeemToken: NftCollection!
  launchedTokenAmount: String!
  acceptedTokenAmount: String!
  launchedTokenRedeemBalance: String!
  acceptedTokenRedeemBalance: String!
  launchedTokenPrice: String!
  acceptedTokenPrice: String!
  launchedTokenPriceUSD: String!
  acceptedTokenPriceUSD: String!
  startBlock: Float!
  endBlock: Float!
  currentPhase: PhaseModel!
  minLaunchedTokenPrice: String!
  noLimitPhaseDurationBlocks: Int!
  linearPenaltyPhaseDurationBlocks: Int!
  fixedPenaltyPhaseDurationBlocks: Int!
  lockingScAddress: String!
  unlockEpoch: Int!
  penaltyMinPercentage: Float!
  penaltyMaxPercentage: Float!
  fixedPenaltyPercentage: Float!
}

type GenericToken {
  tokenID: String!
  nonce: Int!
  amount: String!
}

type EnterFarmEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  farmingToken: GenericToken!
  farmingReserve: String!
  farmToken: GenericToken!
  farmSupply: String!
  rewardToken: GenericToken!
  rewardTokenReserves: String!
  farmAttributes: FarmTokenAttributesModel!
  createdWithMerge: Boolean!
}

type ExitFarmEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  farmingToken: GenericToken!
  farmingReserve: String!
  farmToken: GenericToken!
  farmSupply: String!
  rewardToken: GenericToken!
  rewardTokenReserves: String!
  farmAttributes: FarmTokenAttributesModel!
}

type RewardsEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  oldFarmToken: GenericToken!
  newFarmToken: GenericToken!
  farmSupply: String!
  rewardToken: GenericToken!
  rewardTokenReserves: String!
  oldFarmAttributes: FarmTokenAttributesModel!
  newFarmAttributes: FarmTokenAttributesModel!
  createdWithMerge: Boolean!
}

type AddLiquidityEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  firstToken: GenericToken!
  secondToken: GenericToken!
  liquidityPoolToken: GenericToken!
  liquidityPoolSupply: String!
  firstTokenReserves: String!
  secondTokenReserves: String!
}

type RemoveLiquidityEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  firstToken: GenericToken!
  secondToken: GenericToken!
  liquidityPoolToken: GenericToken!
  liquidityPoolSupply: String!
  firstTokenReserves: String!
  secondTokenReserves: String!
}

type SwapFixedInputEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  tokenIn: GenericToken!
  tokenOut: GenericToken!
  feeAmount: String!
  tokenInReserves: String!
  tokenOutReserves: String!
}

type SwapNoFeeEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  tokenIn: GenericToken!
  tokenOut: GenericToken!
  destination: String!
}

type PairProxyEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  firstToken: GenericToken!
  secondToken: GenericToken!
  wrappedLpToken: GenericToken!
  wrappedLpAttributes: WrappedLpTokenAttributesModel!
}

type AddLiquidityProxyEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  firstToken: GenericToken!
  secondToken: GenericToken!
  wrappedLpToken: GenericToken!
  wrappedLpAttributes: WrappedLpTokenAttributesModel!
  createdWithMerge: Boolean!
}

type ClaimRewardsProxyEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  farmAddress: String!
  oldWrappedFarmToken: GenericToken!
  newWrappedFarmToken: GenericToken!
  rewardToken: GenericToken!
  oldWrappedFarmAttributes: WrappedFarmTokenAttributesModel!
  newWrappedFarmAttributes: WrappedFarmTokenAttributesModel!
  createdWithMerge: Boolean!
}

type CompoundRewardsProxyEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  farmAddress: String!
  oldWrappedFarmToken: GenericToken!
  newWrappedFarmToken: GenericToken!
  oldWrappedFarmAttributes: WrappedFarmTokenAttributesModel!
  newWrappedFarmAttributes: WrappedFarmTokenAttributesModel!
  createdWithMerge: Boolean!
}

type EnterFarmProxyEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  farmAddress: String!
  farmingToken: GenericToken!
  wrappedFarmToken: GenericToken!
  wrappedFarmAttributes: WrappedFarmTokenAttributesModel!
  createdWithMerge: Boolean!
}

type ExitFarmProxyEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  farmAddress: String!
  wrappedFarmToken: GenericToken!
  wrappedFarmAttributes: WrappedFarmTokenAttributesModel!
  farmingToken: GenericToken!
  rewardToken: GenericToken!
}

type SwapFixedOutputEvent {
  address: String!
  caller: String!
  block: Int!
  epoch: Int!
  timestamp: Int!
  tokenIn: GenericToken!
  tokenOut: GenericToken!
  feeAmount: String!
  tokenInReserves: String!
  tokenOutReserves: String!
}

type MetabondingStakingModel {
  address: String!
  lockedAssetToken: NftCollection!
  lockedAssetTokenSupply: String!
  unbondEpochs: Int!
}

type UserEntryModel {
  tokenNonce: Int!
  stakedAmount: String!
  unstakedAmount: String!
  unbondEpoch: Float
}

type Query {
  factory: FactoryModel!
  pairAddresses: [String!]!
  pairs(address: String, firstTokenID: String, secondTokenID: String, issuedLpToken: Boolean = true, offset: Int = 0, limit: Int = 10): [PairModel!]!
  createPair(secondTokenID: String!, firstTokenID: String!): TransactionModel!
  upgradePair(fees: [Float!]!, secondTokenID: String!, firstTokenID: String!): TransactionModel!
  issueLPToken(lpTokenTicker: String!, lpTokenName: String!, address: String!): TransactionModel!
  setLocalRoles(address: String!): TransactionModel!
  getAutoRouteFixedInput(tokenInID: String!, tokenOutID: String!, amount: String!, tolerance: Float!): AutoRouterModel!
  getAutoRouteFixedOutput(tokenInID: String!, tokenOutID: String!, amount: String!, tolerance: Float!): AutoRouterModel!
  getExchangeRate(tokenOutID: String!, tokenInID: String!): String!
  setState(enable: Boolean!, address: String!): TransactionModel!
  setFee(enable: Boolean!, feeTokenID: String!, feeToAddress: String!, pairAddress: String!): TransactionModel!
  setPairCreationEnabled(enabled: Boolean!): TransactionModel!
  getLastErrorMessage: String!
  clearPairTemporaryOwnerStorage: TransactionModel!
  setTemporaryOwnerPeriod(periodBlocks: Float!): TransactionModel!
  setPairTemplateAddress(address: String!): TransactionModel!
  getAmountOut(amount: String!, tokenInID: String!, pairAddress: String!): String!
  getAmountIn(amount: String!, tokenOutID: String!, pairAddress: String!): String!
  getEquivalent(amount: String!, tokenInID: String!, pairAddress: String!): String!
  getLiquidityPosition(liquidityAmount: String!, pairAddress: String!): LiquidityPosition!
  addInitialLiquidityBatch(pairAddress: String!, tokens: [InputTokenModel!]!, tolerance: Float!): [TransactionModel!]!
  addLiquidityBatch(pairAddress: String!, tokens: [InputTokenModel!]!, tolerance: Float!): [TransactionModel!]!
  addLiquidity(pairAddress: String!, tokens: [InputTokenModel!]!, tolerance: Float!): TransactionModel!
  removeLiquidity(pairAddress: String!, liquidity: String!, liquidityTokenID: String!, tolerance: Float!): [TransactionModel!]!
  swapTokensFixedInput(pairAddress: String!, tokenInID: String!, amountIn: String!, tokenOutID: String!, amountOut: String!, tolerance: Float!): [TransactionModel!]!
  swapTokensFixedOutput(pairAddress: String!, tokenInID: String!, amountIn: String!, tokenOutID: String!, amountOut: String!): [TransactionModel!]!
  wrappingInfo: [WrapModel!]!
  wrapEgld(amount: String!): TransactionModel!
  unwrapEgld(amount: String!): TransactionModel!
  farmTokenAttributes(attributes: String!, identifier: String!, farmAddress: String!): FarmTokenAttributesModel!
  farms: [FarmModel!]!
  getRewardsForPosition(farmsPositions: BatchFarmRewardsComputeArgs!): [RewardsModel!]!
  getExitFarmTokens(args: CalculateRewardsArgs!): ExitFarmTokensModel!
  enterFarm(farmAddress: String!, tokens: [InputTokenModel!]!, lockRewards: Boolean): TransactionModel!
  exitFarm(farmAddress: String!, farmTokenID: String!, farmTokenNonce: Int!, amount: String!, lockRewards: Boolean = false, withPenalty: Boolean = false): TransactionModel!
  claimRewards(farmAddress: String!, farmTokenID: String!, farmTokenNonce: Int!, amount: String!, lockRewards: Boolean = false): TransactionModel!
  compoundRewards(farmAddress: String!, farmTokenID: String!, farmTokenNonce: Int!, amount: String!, lockRewards: Boolean = false): TransactionModel!
  migrateToNewFarm(farmAddress: String!, farmTokenID: String!, farmTokenNonce: Int!, amount: String!, lockRewards: Boolean = false, withPenalty: Boolean = false): TransactionModel!
  setFarmMigrationConfig(oldFarmAddress: String!, oldFarmTokenID: String!, newFarmAddress: String!, newLockedFarmAddress: String!): TransactionModel!
  stopRewardsAndMigrateRps(farmAddress: String!): TransactionModel!
  stakingTokenAttributes(args: DecodeAttributesArgs!): [StakingTokenAttributesModel!]!
  unboundTokenAttributes(args: DecodeAttributesArgs!): [UnbondTokenAttributesModel!]!
  getStakingRewardsForPosition(stakingPositions: BatchFarmRewardsComputeArgs!): [StakingRewardsModel!]!
  stakingFarms: [StakingModel!]!
  stakeFarm(farmStakeAddress: String!, payments: [InputTokenModel!]!): TransactionModel!
  unstakeFarm(farmStakeAddress: String!, payment: InputTokenModel!): TransactionModel!
  unbondFarm(farmStakeAddress: String!, payment: InputTokenModel!): TransactionModel!
  claimStakingRewards(farmStakeAddress: String!, payment: InputTokenModel!): TransactionModel!
  claimStakingRewardsWithNewValue(farmStakeAddress: String!, payment: InputTokenModel!, newValue: String!): TransactionModel!
  compoundStakingRewards(farmStakeAddress: String!, payment: InputTokenModel!): TransactionModel!
  mergeStakeFarmTokens(farmStakeAddress: String!, payments: [InputTokenModel!]!): TransactionModel!
  dualYieldTokenAttributes(args: DecodeAttributesArgs!): [DualYieldTokenAttributesModel!]!
  stakingProxies: [StakingProxyModel!]!
  stakeFarmTokens(proxyStakingAddress: String!, payments: [InputTokenModel!]!): TransactionModel!
  claimDualYield(proxyStakingAddress: String!, payments: [InputTokenModel!]!): TransactionModel!
  unstakeFarmTokens(proxyStakingAddress: String!, payment: InputTokenModel!, attributes: String!, tolerance: Float!): TransactionModel!
  getDualYieldRewardsForPosition(proxyStakingPositions: BatchFarmRewardsComputeArgs!): [DualYieldRewardsModel!]!
  getUnstakeTokensReceived(position: CalculateRewardsArgs!): UnstakeFarmTokensReceiveModel!
  distribution: DistributionModel!
  claimLockedAssets: TransactionModel!
  distributedLockedAssets: String!
  proxy: ProxyModel!
  addLiquidityProxyBatch(pairAddress: String!, tokens: [InputTokenModel!]!, tolerance: Float!): [TransactionModel!]!
  addLiquidityProxy(pairAddress: String!, tokens: [InputTokenModel!]!, tolerance: Float!): TransactionModel!
  removeLiquidityProxy(pairAddress: String!, wrappedLpTokenID: String!, wrappedLpTokenNonce: Int!, liquidity: String!, tolerance: Float!): [TransactionModel!]!
  enterFarmProxy(farmAddress: String!, tokens: [InputTokenModel!]!, lockRewards: Boolean): TransactionModel!
  exitFarmProxy(farmAddress: String!, wrappedFarmTokenID: String!, wrappedFarmTokenNonce: Int!, amount: String!, lockRewards: Boolean = false, withPenalty: Boolean = false): TransactionModel!
  claimFarmRewardsProxy(farmAddress: String!, wrappedFarmTokenID: String!, wrappedFarmTokenNonce: Int!, amount: String!, lockRewards: Boolean = false): TransactionModel!
  mergeWrappedLpTokens(tokens: [InputTokenModel!]!): TransactionModel!
  mergeWrappedFarmTokens(tokens: [InputTokenModel!]!, farmAddress: String!): TransactionModel!
  compoundRewardsProxy(farmAddress: String!, tokenID: String!, tokenNonce: Int!, amount: String!, lockRewards: Boolean = false): TransactionModel!
  migrateToNewFarmProxy(farmAddress: String!, wrappedFarmTokenID: String!, wrappedFarmTokenNonce: Int!, amount: String!, lockRewards: Boolean = false, withPenalty: Boolean = false): TransactionModel!
  wrappedLpTokenAttributes(args: DecodeAttributesArgs!): [WrappedLpTokenAttributesModel!]!
  wrappedFarmTokenAttributes(args: DecodeAttributesArgs!): [WrappedFarmTokenAttributesModel!]!
  lockedAssetFactory: LockedAssetModel!
  lockAssets(inputToken: InputTokenModel!): TransactionModel!
  unlockAssets(lockedTokenID: String!, lockedTokenNonce: Int!, amount: String!): TransactionModel!
  mergeLockedAssetTokens(tokens: [InputTokenModel!]!): TransactionModel!
  decodeLockedAssetAttributes(args: DecodeAttributesArgs!): [LockedAssetAttributes!]!
  metabondingStaking: MetabondingStakingModel!
  metabondingStakedPosition: UserEntryModel!
  stakeLockedAssetMetabonding(inputTokens: InputTokenModel!): TransactionModel!
  unstakeMetabonding(unstakeAmount: String!): TransactionModel!
  unbondMetabonding: TransactionModel!
  priceDiscoveryContracts: [PriceDiscoveryModel!]!
  depositBatchOnPriceDiscovery(inputTokens: InputTokenModel!, priceDiscoveryAddress: String!): [TransactionModel!]!
  depositOnPriceDiscovery(inputTokens: InputTokenModel!, priceDiscoveryAddress: String!): TransactionModel!
  withdrawBatchFromPriceDiscovery(inputTokens: InputTokenModel!, priceDiscoveryAddress: String!): [TransactionModel!]!
  withdrawFromPriceDiscovery(inputTokens: InputTokenModel!, priceDiscoveryAddress: String!): TransactionModel!
  redeemTokensBatchFromPriceDiscovery(inputTokens: InputTokenModel!, priceDiscoveryAddress: String!): [TransactionModel!]!
  redeemTokensFromPriceDiscovery(inputTokens: InputTokenModel!, priceDiscoveryAddress: String!): TransactionModel!
  simpleLock: SimpleLockModel!
  lockedTokenAttributes(args: DecodeAttributesArgs!): [LockedTokenAttributesModel!]!
  lpProxyTokenAttributes(args: DecodeAttributesArgs!): [LpProxyTokenAttributesModel!]!
  farmProxyTokenAttributes(args: DecodeAttributesArgs!): [FarmProxyTokenAttributesModel!]!
  unlockTokens(inputTokens: InputTokenModel!): TransactionModel!
  addLiquidityLockedTokenBatch(tolerance: Float!, pairAddress: String!, inputTokens: [InputTokenModel!]!): [TransactionModel!]!
  removeLiquidityLockedToken(tolerance: Float!, attributes: String!, inputTokens: InputTokenModel!): [TransactionModel!]!
  enterFarmLockedToken(farmAddress: String!, inputTokens: [InputTokenModel!]!): TransactionModel!
  exitFarmLockedToken(inputTokens: InputTokenModel!): TransactionModel!
  claimRewardsFarmLockedToken(inputTokens: InputTokenModel!): TransactionModel!
  tokens(offset: Int = 0, limit: Int = 10): [UserToken!]!
  nfts(offset: Int = 0, limit: Int = 10): [UserNftTokens!]!
  getUserWorth: Float!
  getTokenPriceUSD(tokenID: String!): String!
  totalValueLockedUSD: String!
  totalLockedValueUSDFarms: String!
  totalTokenSupply(tokenID: String!): String!
  totalAggregatedRewards(days: Int!): String!
  getFeeTokenBurned(time: String!, tokenID: String!): String!
  getPenaltyTokenBurned(time: String!, tokenID: String!): String!
  historicData(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  closingValue(series: String!, metric: String!, time: String, start: String, bin: String): String!
  completeValues(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  latestCompleteValues(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  sumCompleteValues(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  latestValues(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  marketValues(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  marketCompleteValues(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  values24h(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  values24hSum(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  latestHistoricData(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  latestBinnedHistoricData(series: String!, metric: String!, time: String, start: String, bin: String): [HistoricDataModel!]!
  pairsDayDatas(pairAddress: String): [PairDayDataModel!]!
}

input InputTokenModel {
  tokenID: String!
  nonce: Int!
  amount: String!
  attributes: String
}

input BatchFarmRewardsComputeArgs {
  farmsPositions: [CalculateRewardsArgs!]!
}

input CalculateRewardsArgs {
  farmAddress: String!
  liquidity: String!
  identifier: String!
  attributes: String!
  vmQuery: Boolean = false
}

input DecodeAttributesArgs {
  batchAttributes: [DecodeAttributesModel!]!
}

input DecodeAttributesModel {
  identifier: String!
  attributes: String!
}

union UserNftTokens = UserLockedAssetToken | UserFarmToken | UserLockedLPToken | UserLockedFarmToken | UserStakeFarmToken | UserUnbondFarmToken | UserDualYiledToken | UserRedeemToken | UserLockedEsdtToken | UserLockedSimpleLpToken | UserLockedSimpleFarmToken | UserNftToken

type UserLockedAssetToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: LockedAssetAttributes!
  valueUSD: String!
}

type UserFarmToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: FarmTokenAttributesModel!
  valueUSD: String!
}

type UserLockedLPToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: WrappedLpTokenAttributesModel!
  valueUSD: String!
}

type UserLockedFarmToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: WrappedFarmTokenAttributesModel!
  valueUSD: String!
}

type UserStakeFarmToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: StakingTokenAttributesModel!
  valueUSD: String!
}

type UserUnbondFarmToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: UnbondTokenAttributesModel!
  valueUSD: String!
}

type UserDualYiledToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: DualYieldTokenAttributesModel!
  valueUSD: String!
}

type UserRedeemToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  valueUSD: String!
}

type UserLockedEsdtToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: LockedTokenAttributesModel!
  valueUSD: String!
}

type UserLockedSimpleLpToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: LpProxyTokenAttributesModel!
  valueUSD: String!
}

type UserLockedSimpleFarmToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  decodedAttributes: FarmProxyTokenAttributesModel!
  valueUSD: String!
}

type UserNftToken {
  identifier: String!
  collection: String!
  decimals: Int!
  timestamp: Int!
  attributes: String!
  nonce: Int!
  type: String!
  name: String!
  creator: String!
  royalties: Int!
  uris: [String!]!
  url: String!
  tags: [String!]!
  balance: String!
  valueUSD: String!
}

type Subscription {
  swapFixedInputEvent: SwapFixedInputEvent!
  swapFixedOutputEvent: SwapFixedOutputEvent!
  addLiquidityEvent: AddLiquidityEvent!
  removeLiquidityEvent: RemoveLiquidityEvent!
  swapNoFeeEvent: SwapNoFeeEvent!
  enterFarmEvent: EnterFarmEvent!
  exitFarmEvent: ExitFarmEvent!
  claimRewardsEvent: RewardsEvent!
  compoundRewardsEvent: RewardsEvent!
  addLiquidityProxyEvent: AddLiquidityProxyEvent!
  removeLiquidityProxyEvent: PairProxyEvent!
  enterFarmProxyEvent: EnterFarmProxyEvent!
  exitFarmProxyEvent: ExitFarmProxyEvent!
  claimRewardsProxyEvent: ClaimRewardsProxyEvent!
  compoundRewardsProxyEvent: CompoundRewardsProxyEvent!
}
