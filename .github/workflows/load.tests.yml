name: Load Tests

on:
  pull_request:
    branches: [main, development, MEX-723-load-test-workflow]

# Add permissions block at the top level
permissions:
  pull-requests: write
  contents: read
jobs:
  test-base:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      timescaledb:
        image: timescale/timescaledb-ha:pg16
        env:
          POSTGRES_USER: timescaledb
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.base.sha }}

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Copy config
      run: npm run copy-env

    - name: Build
      run: npm run build

    - name: Start Node.js API
      run: |
        export GH_ACTIONS=true
        export ENABLE_PUBLIC_API=true
        export ENABLE_PRIVATE_API=true
        export PORT=3005
        export PRIVATE_PORT=4001
        export NODE_ENV=devnet
        export REDIS_URL=localhost
        export REDIS_PORT=6379
        export MONGODB_URL=mongodb://localhost:27017
        export MONGODB_DATABASE=development
        export MONGODB_USERNAME=admin
        export MONGODB_PASSWORD=admin
        export TIMESCALEDB_URL=localhost
        export TIMESCALEDB_PORT=5432
        export TIMESCALEDB_DATABASE=timescaledb
        export TIMESCALEDB_USERNAME=timescaledb
        export TIMESCALEDB_PASSWORD=password
        echo "Starting Node.js API..."
        nohup node ./dist/main.js > server.log 2>&1 &
        echo $! > .api.pid
        echo "Server PID: $(cat .api.pid)"
        echo "Waiting 5 seconds for initial startup..."
        sleep 5  # Give initial time for process to start
        if ! ps -p $(cat .api.pid) > /dev/null; then
          echo "Server failed to start! Here's the log:"
          cat server.log
          exit 1
        fi
        echo "Server process is running. Proceeding with health checks..."

    - name: Wait for API to be ready
      run: |
        if ! ps -p $(cat .api.pid) > /dev/null; then
          echo "API process is not running"
          echo "Server log output:"
          cat server.log
          exit 1
        fi
        
        # Monitor server logs in background
        tail -f server.log &
        TAIL_PID=$!
        
        # Wait for server to indicate it's ready
        echo "Waiting for server to start..."
        timeout 60 bash -c 'until grep -q "Nest application successfully started" server.log; do
          if ! ps -p $(cat .api.pid) > /dev/null; then
            echo "API process died"
            echo "Server log output:"
            cat server.log
            exit 1
          fi
          echo "Waiting for server startup..."
          sleep 2
        done'
        
        # Give a moment for all routes to be ready
        echo "Server indicated successful start. Waiting 5 seconds for routes to be ready..."
        sleep 5
        
        # Stop monitoring logs
        kill $TAIL_PID
        
        echo "API is ready"

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Preload cache
      run: k6 run ./k6/preload.js

    - name: Run k6 Load Test
      run: |
        mkdir -p k6/output
        k6 run ./k6/script.js
        mv summary.json k6/output/summary.json

    - name: Upload result file for base branch
      uses: actions/upload-artifact@v4
      with:
        name: base-results
        path: k6/output/summary.json

    - name: Cleanup
      if: always()
      run: |
        if [ -f .api.pid ]; then
          kill $(cat .api.pid) || true
          rm .api.pid
        fi

  test-head:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      timescaledb:
        image: timescale/timescaledb-ha:pg16
        env:
          POSTGRES_USER: timescaledb
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Copy config
      run: npm run copy-env

    - name: Build
      run: npm run build

    - name: Start Node.js API
      run: |
        export GH_ACTIONS=true
        export ENABLE_PUBLIC_API=true
        export ENABLE_PRIVATE_API=true
        export PORT=3005
        export PRIVATE_PORT=4001
        export NODE_ENV=devnet
        export REDIS_URL=localhost
        export REDIS_PORT=6379
        export MONGODB_URL=mongodb://localhost:27017
        export MONGODB_DATABASE=development
        export MONGODB_USERNAME=admin
        export MONGODB_PASSWORD=admin
        export TIMESCALEDB_URL=localhost
        export TIMESCALEDB_PORT=5432
        export TIMESCALEDB_DATABASE=timescaledb
        export TIMESCALEDB_USERNAME=timescaledb
        export TIMESCALEDB_PASSWORD=password
        echo "Starting Node.js API..."
        nohup node ./dist/main.js > server.log 2>&1 &
        echo $! > .api.pid
        echo "Server PID: $(cat .api.pid)"
        echo "Waiting 5 seconds for initial startup..."
        sleep 5  # Give initial time for process to start
        if ! ps -p $(cat .api.pid) > /dev/null; then
          echo "Server failed to start! Here's the log:"
          cat server.log
          exit 1
        fi
        echo "Server process is running. Proceeding with health checks..."

    - name: Wait for API to be ready
      run: |
        if ! ps -p $(cat .api.pid) > /dev/null; then
          echo "API process is not running"
          echo "Server log output:"
          cat server.log
          exit 1
        fi
        
        # Monitor server logs in background
        tail -f server.log &
        TAIL_PID=$!
        
        # Wait for server to indicate it's ready
        echo "Waiting for server to start..."
        timeout 60 bash -c 'until grep -q "Nest application successfully started" server.log; do
          if ! ps -p $(cat .api.pid) > /dev/null; then
            echo "API process died"
            echo "Server log output:"
            cat server.log
            exit 1
          fi
          echo "Waiting for server startup..."
          sleep 2
        done'
        
        # Give a moment for all routes to be ready
        echo "Server indicated successful start. Waiting 5 seconds for routes to be ready..."
        sleep 5
        
        # Stop monitoring logs
        kill $TAIL_PID
        
        echo "API is ready"

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Preload cache
      run: k6 run ./k6/preload.js

    - name: Run k6 Load Test
      run: |
        mkdir -p k6/output
        k6 run ./k6/script.js
        mv summary.json k6/output/summary.json


    - name: Upload result file for head branch
      uses: actions/upload-artifact@v4
      with:
        name: head-results
        path: k6/output/summary.json

    - name: Cleanup
      if: always()
      run: |
        if [ -f .api.pid ]; then
          kill $(cat .api.pid) || true
          rm .api.pid
        fi

  compare-results:
    runs-on: ubuntu-latest
    needs: [test-base, test-head]
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Compare test results
        run: |
          node ./k6/compare-results.js ${{ github.event.pull_request.base.sha }} artifacts/base-results/summary.json ${{ github.event.pull_request.head.sha }} artifacts/head-results/summary.json report.md
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: k6 load testing comparison

      - name: Display Report Contents
        run: |
          echo "=== Load Test Comparison Report ==="
          cat report.md
          echo "================================"

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-file: report.md
          edit-mode: replace
